(package-initialize)

(add-to-list 'load-path "~/.emacs.d/undo-tree")
(add-to-list 'load-path "~/.emacs.d/company-lua-master")
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(menu-bar-mode -1)


(add-to-list 'load-path "~/.emacs.d/org-asciidoc/")
(require 'ox-asciidoc)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(lua-prefix-key "C-c C-d")
 '(package-selected-packages
   (quote
    (nim-mode helm-projectile projectile htmlize lua-mode company go-autocomplete go-mode neotree yasnippet-snippets use-package auto-yasnippet))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(mode-line ((t (:background "black" :foreground "white"))))
 '(mode-line-inactive ((t (:background "default" :foreground "black")))))

;company
(require 'company)
(add-hook 'after-init-hook 'global-company-mode)

; auto complete
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)

;; reload emacs
(defun reload-dotemacs ()
  (interactive)
  (load-file "~/.emacs"))
(global-set-key (kbd "C-c l") 'reload-dotemacs)

; undo-tree
(require 'undo-tree)
(defun neo-resize (val)
  "Resize neo tree"
  (interactive
   (list (read-number "Resize neo-tree, enter value: ")))
  (setq neo-window-width val))

(global-set-key (kbd "C-c r") 'neo-resize)


; redo undo
(global-undo-tree-mode 1)
(defalias 'redo 'undo-tree-redo)
(global-set-key (kbd "C-S-z") 'redo)
(global-set-key (kbd "C-z") 'undo)

;ido
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)

;neotree
(global-set-key (kbd "C-q")   'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
(setq projectile-switch-project-action 'neotree-projectile-action)
; Stopping Neotree from constantly switching to the open file's directory
(setq neo-autorefresh nil)
(global-set-key (kbd "C-c g") 'neotree-refresh)
; Open the Neotree window but remain in the current buffer
(setq neo-toggle-window-keep-p nil)
(global-set-key (kbd "C-c h") 'neotree-hidden-file-toggle)


;; helm
(require 'helm-config)
;(helm-mode 1)
;(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-b") 'helm-mini)
(require 'helm-projectile)
(helm-projectile-on)


;projectile
(require 'projectile)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c o") 'projectile-command-map)
(projectile-mode +1)
(global-set-key (kbd "C-c d") 'projectile-discover-projects-in-directory)

; window moving and highlight, line highlight
(defun v-resize (key)
  (interactive "cHit to enlarge\shrink")
  (cond
   ((eq key (string-to-char ","))
    (enlarge-window 1)
    (call-interactively 'v-resize))
   ((eq key (string-to-char "."))
    (enlarge-window -1)
    (call-interactively 'v-resize))
   ((eq key (string-to-char "<"))
    (enlarge-window-horizontally -1)
    (call-interactively 'v-resize))
   ((eq key (string-to-char ">"))
    (enlarge-window-horizontally 1)
    (call-interactively 'v-resize))
   (t (push key unread-command-events))))
(global-set-key "\C-c," 'v-resize)
(global-set-key "\C-c." 'v-resize)
(global-set-key "\C-c ," 'v-resize)
(global-set-key "\C-c ." 'v-resize)
(global-set-key "\C-c-" 'v-resize)

(global-set-key (kbd "C-x ,")   'enlarge-window)
(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-c n") 'next-buffer)
(global-set-key (kbd "C-c p") 'previous-buffer)
(global-set-key (kbd "<C-up>") 'backward-paragraph)
(global-set-key (kbd "<C-down>") 'forward-paragraph)

;;; opacit window 
(defun highlight-selected-window ()
  "Highlight selected window with a different background color."
 (walk-windows (lambda (w)
                (unless (eq w (selected-window))
                 (with-current-buffer (window-buffer w)
                  (buffer-face-set '(:background "#2b2b2b"))))))
  (buffer-face-set 'default))
(add-hook 'buffer-list-update-hook 'highlight-selected-window)
(global-hl-line-mode 1)
(set-face-background 'hl-line "#3e4449")
;; underline the current line
(set-face-foreground 'highlight nil)
;; mode line




; go
(setq exec-path (append '("/usr/local/Cellar/go/1.12.1/bin") exec-path))
(setenv "PATH" (concat "/usr/local/Cellar/go/1.12.1/bin:" (getenv "PATH")))

(defun my-go-mode-hook ()
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
)

(add-hook 'go-mode-hook 'my-go-mode-hook)

(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)

(with-eval-after-load 'go-mode
   (require 'go-autocomplete))



;lua
(require 'company-lua)

(defun my-lua-mode-company-init ()
  (setq-local company-backends '((company-lua
                                  company-etags
                                  company-dabbrev-code
                                  company-yasnippet))))
(add-hook 'lua-mode-hook #'my-lua-mode-company-init)


; adoc
(defun adoc-html ()
  "ASCIIDOC to HTML"
  (interactive)
  (shell-command
   (concat "asciidoc -a data-uri -a icons -a toc "
	   (expand-file-name (buffer-name)))))
(global-set-key (kbd "C-c a") 'adoc-html)

