(package-initialize)

(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/"))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (emmet-mode web-mode vue-mode helm alchemist neotree))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(global-set-key (kbd "C-q")   'neotree-toggle)

(defun reload-dotemacs ()
  (interactive)
  (load-file "~/.emacs"))

(global-set-key (kbd "C-c l") 'reload-dotemacs)


(add-hook 'prog-mode-hook 'linum-mode)

(require 'elixir-mode)
(require 'alchemist)

(add-hook 'after-init-hook 'global-company-mode)

(global-set-key (kbd "C-x <down>") 'windmove-down)
(global-set-key (kbd "C-x <up>") 'windmove-up)
(global-set-key (kbd "C-x <left>") 'windmove-left)
(global-set-key (kbd "C-x <right>") 'windmove-right)
(global-set-key (kbd "C-c n") 'next-buffer)
(global-set-key (kbd "C-c p") 'previous-buffer)

(global-undo-tree-mode 1)
 (global-set-key (kbd "C-z") 'undo)
 (defalias 'redo 'undo-tree-redo)
 (global-set-key (kbd "C-S-z") 'redo)

(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-b") 'helm-mini)

; shrink and enlarge;
(defun v-resize (key)
  (interactive "cHit to enlarge\shrink")
  (cond

   ((eq key (string-to-char ","))
    (enlarge-window 1)
    (call-interactively 'v-resize))

   ((eq key (string-to-char "."))
    (enlarge-window -1)
    (call-interactively 'v-resize))

   ((eq key (string-to-char "<"))
    (enlarge-window-horizontally -1)
    (call-interactively 'v-resize))

   ((eq key (string-to-char ">"))
    (enlarge-window-horizontally 1)
    (call-interactively 'v-resize))

   (t (push key unread-command-events))))

(global-set-key "\C-c," 'v-resize)
(global-set-key "\C-c." 'v-resize)
(global-set-key "\C-c ," 'v-resize)
(global-set-key "\C-c ." 'v-resize)


(global-set-key "\C-c-" 'v-resize)


;;


(require 'web-mode)


(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

(add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))


(eval-after-load 'company-etags '(progn (add-to-list 'company-etags-modes 'web-mode)))
(setq company-etags-everywhere '(html-mode web-mode))

;; emmet-mode

(add-hook 'web-mode-hook 'emmet-mode)

;;; helm

(setq helm-display-function 'helm-display-buffer-in-own-frame
        helm-display-buffer-reuse-frame t
        helm-use-undecorated-frame-option t)


;; neotree
(setq neo-window-width 40)
(eval-after-load "neotree"
  '(add-to-list 'window-size-change-functions
                (lambda (frame)
                  (let ((neo-window (neo-global--get-window)))
                    (unless (null neo-window)
                      (setq neo-window-width (window-width neo-window)))))))

(setq debug-on-error nil)
